{"version":3,"file":"test.cjs","sources":["../src/y-redis.js","../tests/y-redis.tests.js","../tests/index.js"],"sourcesContent":["import * as Y from 'yjs'\nimport * as mutex from 'lib0/mutex.js'\nimport { Observable } from 'lib0/observable.js'\nimport * as promise from 'lib0/promise.js'\nimport * as error from 'lib0/error.js'\nimport * as logging from 'lib0/logging.js'\nimport Redis from 'ioredis'\n\nconst logger = logging.createModuleLogger('y-redis')\n\n/**\n * Handles persistence of a sinle doc.\n */\nexport class PersistenceDoc {\n  /**\n   * @param {RedisPersistence} rp\n   * @param {string} name\n   * @param {Y.Doc} doc\n   */\n  constructor (rp, name, doc) {\n    this.rp = rp\n    this.name = name\n    this.doc = doc\n    this.mux = mutex.createMutex()\n    /**\n     * Next expected index / len of the list of updates\n     * @type {number}\n     */\n    this._clock = 0\n    this._fetchingClock = 0\n    /**\n     * @param {Uint8Array} update\n     */\n    this.updateHandler = update => {\n      // mux: only store update in redis if this document update does not originate from redis\n      this.mux(() => {\n        rp.redis.rpushBuffer(name + ':updates', Buffer.from(update)).then(len => {\n          if (len === this._clock + 1) {\n            this._clock++\n            if (this._fetchingClock < this._clock) {\n              this._fetchingClock = this._clock\n            }\n          }\n          // @ts-ignore\n          rp.redis.publish(this.name, len.toString())\n        })\n      })\n    }\n    if (doc.store.clients.size > 0) {\n      this.updateHandler(Y.encodeStateAsUpdate(doc))\n    }\n    doc.on('update', this.updateHandler)\n    this.synced = rp.sub.subscribe(name).then(() => this.getUpdates())\n  }\n\n  /**\n   * @return {Promise<any>}\n   */\n  destroy () {\n    this.doc.off('update', this.updateHandler)\n    this.rp.docs.delete(this.name)\n    return this.rp.sub.unsubscribe(this.name)\n  }\n\n  /**\n   * Get all new updates from redis and increase clock if necessary.\n   *\n   * @return {Promise<PersistenceDoc>}\n   */\n  getUpdates () {\n    const startClock = this._clock\n    return this.rp.redis.lrangeBuffer(this.name + ':updates', startClock, -1).then(/** @type {function(Array<Buffer>)} */ updates => {\n      logger('Fetched ', logging.BOLD, logging.PURPLE, (updates.length).toString().padEnd(2), logging.UNBOLD, logging.UNCOLOR, ' updates')\n      this.mux(() => {\n        this.doc.transact(() => {\n          updates.forEach(update => {\n            Y.applyUpdate(this.doc, update)\n          })\n          const nextClock = startClock + updates.length\n          if (this._clock < nextClock) {\n            this._clock = nextClock\n          }\n          if (this._fetchingClock < this._clock) {\n            this._fetchingClock = this._clock\n          }\n        })\n      })\n      if (this._fetchingClock <= this._clock) {\n        return this\n      } else {\n        // there is still something missing. new updates came in. fetch again.\n        if (updates.length === 0) {\n          // Calling getUpdates recursively has the potential to be an infinite fetch-call.\n          // In case no new updates came in, reset _fetching clock (in case the pubsub lied / send an invalid message).\n          // Being overly protective here..\n          this._fetchingClock = this._clock\n        }\n        return this.getUpdates()\n      }\n    })\n  }\n}\n\n/**\n * @param {Object|null} redisOpts\n * @param {Array<Object>|null} redisClusterOpts\n * @return {Redis.Redis | Redis.Cluster}\n */\nconst createRedisInstance = (redisOpts, redisClusterOpts) => redisClusterOpts\n  ? new Redis.Cluster(redisClusterOpts)\n  : (redisOpts ? new Redis(redisOpts) : new Redis())\n\n/**\n * @extends Observable<string>\n */\nexport class RedisPersistence extends Observable {\n  /**\n   * @param {Object} [opts]\n   * @param {Object|null} [opts.redisOpts]\n   * @param {Array<Object>|null} [opts.redisClusterOpts]\n   */\n  constructor ({ redisOpts = /** @type {any} */ (null), redisClusterOpts = /** @type {any} */ (null) } = {}) {\n    super()\n    this.redis = createRedisInstance(redisOpts, redisClusterOpts)\n    this.sub = /** @type {Redis.Redis} */ (createRedisInstance(redisOpts, redisClusterOpts))\n    /**\n     * @type {Map<string,PersistenceDoc>}\n     */\n    this.docs = new Map()\n    this.sub.on('message', (channel, sclock) => {\n      // console.log('message', channel, sclock)\n      const pdoc = this.docs.get(channel)\n      if (pdoc) {\n        const clock = Number(sclock) || Number.POSITIVE_INFINITY // case of null\n        if (pdoc._fetchingClock < clock) {\n          // do not query doc updates if this document is currently already fetching\n          const isCurrentlyFetching = pdoc._fetchingClock !== pdoc._clock\n          if (pdoc._fetchingClock < clock) {\n            pdoc._fetchingClock = clock\n          }\n          if (!isCurrentlyFetching) {\n            pdoc.getUpdates()\n          }\n        }\n      } else {\n        this.sub.unsubscribe(channel)\n      }\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {Y.Doc} ydoc\n   * @return {PersistenceDoc}\n   */\n  bindState (name, ydoc) {\n    if (this.docs.has(name)) {\n      throw error.create(`\"${name}\" is already bound to this RedisPersistence instance`)\n    }\n    const pd = new PersistenceDoc(this, name, ydoc)\n    this.docs.set(name, pd)\n    return pd\n  }\n\n  /**\n   * @param {string} name\n   * @param {Y.Doc} ydoc\n   * @return {Promise<any>}\n   */\n  async writeState(name, ydoc) {}\n\n  destroy () {\n    const docs = this.docs\n    this.docs = new Map()\n    return promise.all(Array.from(docs.values()).map(doc => doc.destroy())).then(() => {\n      this.redis.quit()\n      this.sub.quit()\n      // @ts-ignore\n      this.redis = null\n      // @ts-ignore\n      this.sub = null\n    })\n  }\n\n  /**\n   * @param {string} name\n   */\n  closeDoc (name) {\n    const doc = this.docs.get(name)\n    if (doc) {\n      return doc.destroy()\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @return {Promise<any>}\n   */\n  clearDocument (name) {\n    const doc = this.docs.get(name)\n    if (doc) {\n      doc.destroy()\n    }\n    return this.redis.del(name + ':updates')\n  }\n\n  /**\n   * Destroys this instance and removes all known documents from the database.\n   * After that this Persistence instance is destroyed.\n   *\n   * @return {Promise<any>}\n   */\n  clearAllDocuments () {\n    return promise.all(Array.from(this.docs.keys()).map(name => this.redis.del(name + ':updates'))).then(() => {\n      this.destroy()\n    })\n  }\n}\n","\nimport * as Y from 'yjs'\nimport { RedisPersistence } from '../src/y-redis.js'\nimport * as t from 'lib0/testing.js'\nimport * as promise from 'lib0/promise.js'\nimport Redis from 'ioredis'\n\n/**\n * Two clients concurrently adding content\n *\n * @param {t.TestCase} tc\n */\nexport const testPubsub = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n\n  const redisPersistence1 = new RedisPersistence()\n  const doc1 = new Y.Doc()\n  const persistedDoc1 = redisPersistence1.bindState(tc.testName, doc1)\n  await persistedDoc1.synced\n\n  const redisPersistence2 = new RedisPersistence()\n  const doc2 = new Y.Doc()\n  const persistedDoc2 = redisPersistence2.bindState(tc.testName, doc2)\n  await persistedDoc2.synced\n\n  doc1.getArray('test').push([1])\n  doc2.getArray('test').push([2])\n\n  await promise.until(0, () => persistedDoc1._clock > 1)\n\n  t.assert(doc1.getArray('test').length === 2)\n  t.assert(doc2.getArray('test').length === 2)\n\n  await redisPersistence1.destroy()\n  await redisPersistence2.destroy()\n}\n\n/**\n * @param {t.TestCase} tc\n */\nexport const testStoreAndReload = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    doc.getArray('test').push([1])\n    await promise.wait(50)\n    redisPersistence.destroy()\n  }\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    t.assert(doc.getArray('test').length === 1)\n    await redisPersistence.destroy()\n  }\n}\n\n/**\n * @param {t.TestCase} tc\n */\nexport const testClearDocument = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    doc.getArray('test').push([1])\n    await promise.wait(50)\n    await redisPersistence.clearDocument(tc.testName)\n    await redisPersistence.destroy()\n  }\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    t.assert(doc.getArray('test').length === 0)\n    await redisPersistence.destroy()\n  }\n}\n\n/**\n * @param {t.TestCase} tc\n */\nexport const testClearAllDocument = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    doc.getArray('test').push([1])\n    await promise.wait(50)\n    await redisPersistence.clearAllDocuments()\n  }\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    t.assert(doc.getArray('test').length === 0)\n    await redisPersistence.destroy()\n  }\n}\n\n/**\n * Test time until N updates are written to redis + time to receive and apply updates.\n *\n * @param {t.TestCase} tc\n */\nexport const testPerformance = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n  const N = 10000\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    const persistenceDoc = redisPersistence.bindState(tc.testName, doc)\n    await persistenceDoc.synced\n    await t.measureTime(`write ${N / 1000}k updates`, async () => {\n      const testarray = doc.getArray('test')\n      for (let i = 0; i < N; i++) {\n        testarray.insert(0, [i])\n      }\n      await promise.until(0, () => persistenceDoc._clock >= N)\n      t.assert(testarray.length === N)\n      t.assert(persistenceDoc._clock === N)\n      return undefined\n    })\n    await redisPersistence.destroy()\n  }\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    const persistenceDoc = redisPersistence.bindState(tc.testName, doc)\n    await t.measureTime(`read ${N / 1000}k updates`, async () => {\n      await persistenceDoc.synced\n      t.assert(doc.getArray('test').length === N)\n      return undefined\n    })\n    await redisPersistence.destroy()\n  }\n}\n\n/**\n * Two clients concurrently adding a lot of updates. Syncing after every 10 updates.\n *\n * @param {t.TestCase} tc\n */\nexport const testPerformanceConcurrent = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n  const N = 100\n  {\n    const redisPersistence1 = new RedisPersistence()\n    const doc1 = new Y.Doc()\n    const persistenceDoc1 = redisPersistence1.bindState(tc.testName, doc1)\n    await persistenceDoc1.synced\n    const redisPersistence2 = new RedisPersistence()\n    const doc2 = new Y.Doc()\n    const persistenceDoc2 = redisPersistence2.bindState(tc.testName, doc2)\n    await persistenceDoc2.synced\n    await t.measureTime(`write ${N / 1000}k updates`, async () => {\n      const testarray1 = doc1.getArray('test')\n      const testarray2 = doc2.getArray('test')\n      for (let i = 0; i < N; i++) {\n        if (i % 2) {\n          testarray1.insert(0, [i])\n        } else {\n          testarray2.insert(0, [i])\n        }\n        if (i % 10 === 0) {\n          await promise.until(0, () => persistenceDoc1._clock > i && persistenceDoc2._clock >= i)\n          t.assert(persistenceDoc1._clock === i + 1)\n          t.assert(persistenceDoc2._clock === i + 1)\n        }\n      }\n      await promise.until(0, () => persistenceDoc1._clock >= N && persistenceDoc2._clock >= N)\n      t.assert(testarray1.length === N)\n      t.assert(testarray2.length === N)\n      t.assert(persistenceDoc1._clock === N)\n      t.assert(persistenceDoc2._clock === N)\n      return undefined\n    })\n    await redisPersistence1.destroy()\n  }\n  {\n    const redisPersistence = new RedisPersistence()\n    const doc = new Y.Doc()\n    const persistenceDoc = redisPersistence.bindState(tc.testName, doc)\n\n    await t.measureTime(`read ${N / 1000}k updates`, async () => {\n      await persistenceDoc.synced\n      t.assert(doc.getArray('test').length === N)\n      return undefined\n    })\n    await redisPersistence.destroy()\n  }\n  const updateslen = await redis.llen(`${tc.testName}:updates`)\n  t.assert(updateslen === N)\n}\n\n/**\n * Test the time until another client received all updates.\n *\n * @param {t.TestCase} tc\n */\nexport const testPerformanceReceive = async tc => {\n  const redis = new Redis()\n  await redis.flushall()\n  const N = 10000\n  {\n    const redisPersistence1 = new RedisPersistence()\n    const doc1 = new Y.Doc()\n    const persistenceDoc1 = redisPersistence1.bindState(tc.testName, doc1)\n    await persistenceDoc1.synced\n    const redisPersistence2 = new RedisPersistence()\n    const doc2 = new Y.Doc()\n    const persistenceDoc2 = redisPersistence2.bindState(tc.testName, doc2)\n    await persistenceDoc2.synced\n    await t.measureTime(`write ${N / 1000}k updates`, async () => {\n      const testarray1 = doc1.getArray('test')\n      const testarray2 = doc1.getArray('test')\n      for (let i = 0; i < N; i++) {\n        testarray1.insert(0, [i])\n      }\n      await promise.until(0, () => persistenceDoc1._clock >= N && persistenceDoc2._clock >= N)\n      t.assert(testarray1.length === N)\n      t.assert(testarray2.length === N)\n      t.assert(persistenceDoc1._clock === N)\n      t.assert(persistenceDoc2._clock === N)\n      return undefined\n    })\n    await redisPersistence1.destroy()\n  }\n  await t.measureTime(`read ${N / 1000}k updates`, async () => {\n    const doc = new Y.Doc()\n    const redisPersistence = new RedisPersistence()\n    await redisPersistence.bindState(tc.testName, doc).synced\n    t.assert(doc.getArray('test').length === N)\n    redisPersistence.destroy()\n    return undefined\n  })\n  const updateslen = await redis.llen(`${tc.testName}:updates`)\n  t.assert(updateslen === N)\n}\n","import * as redis from './y-redis.tests.js'\n\nimport { runTests } from 'lib0/testing.js'\nimport { isBrowser, isNode } from 'lib0/environment.js'\nimport * as log from 'lib0/logging.js'\n\nif (isBrowser) {\n  log.createVConsole(document.body)\n}\nrunTests({\n  redis\n}).then(success => {\n  /* istanbul ignore next */\n  if (isNode) {\n    process.exit(success ? 0 : 1)\n  }\n})\n"],"names":["logging.createModuleLogger","mutex.createMutex","Y.encodeStateAsUpdate","logging.BOLD","logging.PURPLE","logging.UNBOLD","logging.UNCOLOR","Y.applyUpdate","Observable","error.create","promise.all","Y.Doc","promise.until","t.assert","promise.wait","t.measureTime","isBrowser","log.createVConsole","runTests","isNode"],"mappings":"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"}